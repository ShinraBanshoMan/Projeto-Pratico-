/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.ambiente.bancario.views;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mycompany.ambiente.bancario.dto.AccountDto;
import com.mycompany.ambiente.bancario.dto.BalanceDto;
import java.awt.HeadlessException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import services.ApiService;
import utils.Message;
import utils.Validate;

/**
 *
 * @author igorl
 */
public class Account extends javax.swing.JFrame {

    AccountDto accountData;

    /**
     * Creates new form Account
     */
    public Account() {
        initComponents();
    }

    public Account(AccountDto accountData) throws HeadlessException {
        this.accountData = accountData;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        incomePercentageLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        accountTypeLabel = new javax.swing.JLabel();
        depositButton = new javax.swing.JButton();
        withdrawButtonText = new javax.swing.JButton();
        depositTextField = new javax.swing.JTextField();
        withdrawTextField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Saldo:");

        balanceLabel.setText("R$ " + accountData.getBalance() );

        jLabel3.setText("Cheque Especial");
        if (!"especial".equals(accountData.getType())) {
            jLabel3.setVisible(false); // Torna a label invisível
            jLabel4.setVisible(false); // Também esconde o label relacionado
        }

        jLabel4.setText("R$ " + accountData.getExcessLimit());

        jLabel5.setText("Rendimento:");
        if (!"poupanca".equals(accountData.getType())) {
            System.out.println("Escondendo jLabel5...");
            jLabel5.setVisible(false); // Torna a label invisível
            incomePercentageLabel.setVisible(false); // Também esconde o label relacionado
        }

        incomePercentageLabel.setText(accountData.getIncome()+"%");

        jLabel7.setText("Tipo:");

        accountTypeLabel.setText(accountData.getType());

        depositButton.setText("Depositar");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        withdrawButtonText.setText("Sacar");
        withdrawButtonText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonTextActionPerformed(evt);
            }
        });

        depositTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositTextFieldActionPerformed(evt);
            }
        });

        withdrawTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawTextFieldActionPerformed(evt);
            }
        });

        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balanceLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(incomePercentageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jSeparator1)
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accountTypeLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(withdrawTextField)
                            .addComponent(depositTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(withdrawButtonText, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(depositButton)))
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(accountTypeLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(balanceLabel)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(incomePercentageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositButton)
                    .addComponent(depositTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(withdrawButtonText)
                    .addComponent(withdrawTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jButton3)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void withdrawButtonTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonTextActionPerformed
        ApiService apiService = new ApiService();

        if (new Validate().isValidNumber(withdrawTextField.getText())) {
            if (Float.valueOf(withdrawTextField.getText()) <= accountData.getBalance() || "especial".equals(accountData.getType())) {
                Double withdrawCalc = accountData.getBalance() - Float.valueOf(withdrawTextField.getText());

                try {
                    BalanceDto balanceDto = new BalanceDto();

                    balanceDto.setAccountId(accountData.getId());

                    if (accountData.getBalance() == 0.0 && "especial".equals(accountData.getType())) {
                        balanceDto.setBalance(Double.valueOf(accountData.getExcessLimit()));
                    } else {
                        balanceDto.setBalance(withdrawCalc);
                        accountData.setBalance(withdrawCalc);
                    }

                    BalanceDto response = apiService.patchBalanceMovement(balanceDto);

                    if (response != null) {
                        if (accountData.getBalance() == 0.0 && "especial".equals(accountData.getType())) {
                            balanceLabel.setText("R$ " + String.valueOf(accountData.getExcessLimit() - Float.valueOf(withdrawTextField.getText())));
                        } else {
                            balanceLabel.setText("R$ " + String.valueOf(withdrawCalc));
                        }

                        new Message(this, "Saque realizado com sucesso", "Atenção!").sucessMessage();
                        this.repaint();
                        this.revalidate();
                    } else {
                        new Message(this, "Não foi possível Sacar", "Atenção!").warningMessage();
                    }
                } catch (JsonProcessingException ex) {
                    new Message(this, "Erro ao validar conta, tente novamente.", "Atenção!").errorMessage();
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException e) {
                    new Message(this, "Erro ao validar conta, tente novamente.", "Atenção!").errorMessage();
                    throw new RuntimeException(e);
                }

            } else {
                new Message(this, "Valor do saque é maior que o saldo.", "Atenção!").errorMessage();
            }

        } else {
            new Message(this, "Saque precisa ser um número.", "Atenção!").errorMessage();

        }    }//GEN-LAST:event_withdrawButtonTextActionPerformed

    private void depositTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositTextFieldActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new Index().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        ApiService apiService = new ApiService();

        if (new Validate().isValidNumber(depositTextField.getText())) {
            Double depositCalc = accountData.getBalance() + Float.valueOf(depositTextField.getText());

            try {
                BalanceDto balanceDto = new BalanceDto();

                balanceDto.setAccountId(accountData.getId());
                balanceDto.setBalance(depositCalc);
                accountData.setBalance(depositCalc);

                BalanceDto response = apiService.patchBalanceMovement(balanceDto);

                if (response != null) {
                    balanceLabel.setText("R$ " + String.valueOf(depositCalc));
                    new Message(this, "Depósito realizado com sucesso", "Atenção!").sucessMessage();
                    this.repaint();
                    this.revalidate();
                } else {
                    new Message(this, "Não foi possível Depositar", "Atenção!").warningMessage();
                }
            } catch (JsonProcessingException ex) {
                new Message(this, "Erro ao validar conta, tente novamente.", "Atenção!").errorMessage();
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException e) {
                new Message(this, "Erro ao validar conta, tente novamente.", "Atenção!").errorMessage();
                throw new RuntimeException(e);
            }
        } else {
            new Message(this, "Deposito precisa ser um número.", "Atenção!").errorMessage();
        }
    }//GEN-LAST:event_depositButtonActionPerformed

    private void withdrawTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_withdrawTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Account().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountTypeLabel;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton depositButton;
    private javax.swing.JTextField depositTextField;
    private javax.swing.JLabel incomePercentageLabel;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton withdrawButtonText;
    private javax.swing.JTextField withdrawTextField;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.ambiente.bancario.views;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mycompany.ambiente.bancario.dto.AccountDto;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import services.ApiService;
import utils.Message;

/**
 *
 * @author igorl
 */
public class CreateAccount extends javax.swing.JFrame {

    /**
     * Creates new form CreateAccount
     */
    public CreateAccount() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        accountTypeComboBox = new javax.swing.JComboBox<>();
        incomeValueLabel = new javax.swing.JLabel();
        excessLimitValueLabel = new javax.swing.JLabel();
        balanceTextField = new javax.swing.JTextField();
        excessLimitValueTextField = new javax.swing.JTextField();
        incomeValueTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome");

        jLabel2.setText("Senha");

        jLabel3.setText("Saldo Inicial (R$)");

        jButton1.setText("Criar Conta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Tipo de Conta");

        accountTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Corrente", "Poupança", "Especial" }));
        accountTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountTypeComboBoxActionPerformed(evt);
            }
        });

        incomeValueLabel.setText("Rendimento Poupança (%)");
        incomeValueLabel.setVisible(false);

        excessLimitValueLabel.setText("Cheque Especial (R$)");
        excessLimitValueLabel.setVisible(false);

        balanceTextField.setText(" ");
        balanceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceTextFieldActionPerformed(evt);
            }
        });

        excessLimitValueTextField.setVisible(false);
        excessLimitValueTextField.setToolTipText("");

        incomeValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incomeValueTextFieldActionPerformed(evt);
            }
        });
        incomeValueTextField.setVisible(false);

        jButton2.setText("Voltar");
        jButton2.setActionCommand("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(passwordTextField)
                    .addComponent(balanceTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameTextField)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(accountTypeComboBox, 0, 206, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excessLimitValueLabel)
                    .addComponent(excessLimitValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(incomeValueLabel)
                    .addComponent(incomeValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accountTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(excessLimitValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(incomeValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(incomeValueLabel)
                        .addGap(28, 28, 28))
                    .addComponent(excessLimitValueLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ApiService apiService = new ApiService();

        Boolean usernameValidation = usernameTextField.getText() != null && !usernameTextField.getText().isEmpty();
        Boolean passwordValidation = passwordTextField.getPassword() != null && passwordTextField.getPassword().length > 0;
        Boolean balanceValidation = balanceTextField.getText() != null && !balanceTextField.getText().isEmpty();

        if (usernameValidation && passwordValidation && balanceValidation) {
            try {
                AccountDto accountDto = new AccountDto();

                accountDto.setName(usernameTextField.getText());
                accountDto.setPassword(String.valueOf(passwordTextField.getPassword()));
                accountDto.setBalance(Double.valueOf(balanceTextField.getText()));

                if (accountTypeComboBox.getSelectedItem() == "Poupança") {
                    accountDto.setType("poupanca");

                    if (incomeValueTextField.getText().matches("[0-9.]*")) {
                        accountDto.setIncome(Float.valueOf(incomeValueTextField.getText()));
                    } else {
                        new Message(this, "Valor de \"Rendimento Poupança\" deve ser um número inteiro ou decimal", "Atenção").warningMessage();
                    }

                } else if (accountTypeComboBox.getSelectedItem() == "Especial") {
                    accountDto.setType("especial");

                    if (excessLimitValueTextField.getText().matches("[0-9.]*")) {
                        accountDto.setExcessLimit(Float.valueOf(excessLimitValueTextField.getText()));
                    } else {
                        new Message(this, "Valor de \"Cheque Especial\" deve ser um número inteiro ou decimal", "Atenção").warningMessage();
                    }
                } else {
                    accountDto.setType("corrente");
                }

                AccountDto response = apiService.postCreateUserAccount(accountDto);

                if (response != null) {
                    new Index().setVisible(true);
                    this.dispose();
                } else {
                    new Message(this, "Usuário inválido", "Atenção!").warningMessage();
                }
            } catch (JsonProcessingException ex) {
                new Message(this, "Erro ao validar conta, tente novamente.", "Atenção!").errorMessage();
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException e) {
                new Message(this, "Erro ao validar conta, tente novamente.", "Atenção!").errorMessage();
                throw new RuntimeException(e);
            }
        } else {
            new Message(this, "Por favor, preencha ambos os campos.", "Atenção!").warningMessage();
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    private void accountTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountTypeComboBoxActionPerformed
        String selected = (String) accountTypeComboBox.getSelectedItem();

        if (null == selected) {
            excessLimitValueLabel.setVisible(false);
            excessLimitValueTextField.setVisible(false);
            incomeValueLabel.setVisible(false);
            incomeValueTextField.setVisible(false);
        } else {
            switch (selected) {
                case "Poupança" -> {
                    excessLimitValueLabel.setVisible(false);
                    excessLimitValueTextField.setVisible(false);
                    incomeValueLabel.setVisible(true);
                    incomeValueTextField.setVisible(true);
                }
                case "Especial" -> {
                    excessLimitValueLabel.setVisible(true);
                    excessLimitValueTextField.setVisible(true);
                    incomeValueLabel.setVisible(false);
                    incomeValueTextField.setVisible(false);
                }
                default -> {
                    excessLimitValueLabel.setVisible(false);
                    excessLimitValueTextField.setVisible(false);
                    incomeValueLabel.setVisible(false);
                    incomeValueTextField.setVisible(false);
                }
            }
        }

        this.revalidate();
        this.repaint();
        this.pack();
    }//GEN-LAST:event_accountTypeComboBoxActionPerformed

    private void balanceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceTextFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Index().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void incomeValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incomeValueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_incomeValueTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        NumberFormat formatoMonetario = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));

        JFormattedTextField campoMonetario = new JFormattedTextField(formatoMonetario);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accountTypeComboBox;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JLabel excessLimitValueLabel;
    private javax.swing.JTextField excessLimitValueTextField;
    private javax.swing.JLabel incomeValueLabel;
    private javax.swing.JTextField incomeValueTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
